import unittest
import numpy as np
from numpy.testing import assert_array_equal
from pyanno import voting
from pyanno.voting import MISSING_VALUE as MV
from pyanno.voting import PyannoValueError

class TestVoting(unittest.TestCase):

    def test_labels_count(self):
        annotations = [
            [1,  2, MV, MV],
            [MV, MV,  3,  3],
            [MV,  1,  3,  1],
            [MV, MV, MV, MV],
        ]
        nclasses = 5
        expected = [0, 3, 1, 3, 0]
        result = voting.labels_count(annotations, nclasses)
        self.assertEqual(result, expected)

    def test_majority_vote(self):
        annotations = [
            [1, 2, 2, MV],
            [2, 2, 2, 2],
            [1, 1, 3, 3],
            [1, 3, 3, 2],
            [MV, 2, 3, 1],
            [MV, MV, MV, 3],
        ]
        expected = [2, 2, 1, 3, 1, 3]
        result = voting.majority_vote(annotations)
        self.assertEqual(expected, result)

    def test_majority_vote_empty_item(self):
        # Bug: majority vote with row of invalid annotations fails
        annotations = np.array(
            [[1, 2, 3],
             [MV, MV, MV],
             [1, 2, 2]]
        )
        expected = [1, MV, 2]
        result = voting.majority_vote(annotations)
        self.assertEqual(expected, result)

    def test_labels_freq(self):
        annotations=[[1, 1, 2], [-1, 1, 2]]
        nclasses=4
        #annotations = [
        #    [1,  2, MV, MV],
        #    [MV, MV,  3,  3],
        #    [MV,  1,  3,  1],
        #    [MV, MV, MV, MV],
        #]
        #nclasses = 5
        #expected = [0, 3, 1, 3, 0]
        expected=[ 0. ,  0.6,  0.4,  0. ]
        result = voting.labels_frequency(annotations, nclasses)
        self.assertAlmostEqual(result, expected,5)

    def test_list(self):
        x = np.array([1, 1])
        y = np.array([2, 2])
        z = np.array([3, 3])
        assert_array_equal(x+y,z)

    def test_123(self):
        self.assertEqual(1+2,3)

    def test_float(self):
        self.assertAlmostEqual(1.1+2.2,3.3,5)

    def test_error1(self):
        annot1 = [[MV, MV], [MV, MV]]
        with self.assertRaises(PyannoValueError):
            voting.labels_count(annot1, 3)

    def test_error2(self):
        annot2 = []
        with self.assertRaises(PyannoValueError):
            voting.labels_count(annot2, 3)

    def test_labels_count_mv(self):
        MV=-999         
        annotations = [
            [1,  2, MV, MV],
            [MV, MV,  3,  3],
            [MV,  1,  3,  1],
            [MV, MV, MV, MV],
        ]
        nclasses = 5
        expected = [0, 3, 1, 3, 0]
        result = voting.labels_count(annotations, nclasses, -999)
        self.assertEqual(result, expected)

    
    def test_majority_vote_mv(self):



if __name__ == '__main__':
    unittest.main()
